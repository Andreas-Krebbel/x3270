#!/bin/bash
# Make everything.  Really.
# Must be run in the top-level directory.
# By default, builds but does not release.
#  With -nobuild, does not build.
#  With -release, releases.
# By default, builds everything.
#  Can specify individual products as arguments.

# If anything fails, stop.
set -e

# Make sure 'sort' works correctly.
export LC_ALL="C"

build=1
release=""
all_prods="x3270 tcl3270 s3270 pr3287 c3270 wc3270 wpr3287 ws3270 Playback"

function usage
{
	echo >&2 "Usage: $0 [--nobuild] [--release] [--win32] [<product>...]"
	exit 0
}

# Parse the options.
while [ $# -gt 0 ]
do	case "$1" in
	-help|--help)
		usage
		;;
	-nobuild|--nobuild)
		build=""
		shift
		;;
	-release|--release)
		release=1
		shift
		;;
	-win32|--win32|-windows|--windows)
		all_prods="wc3270 wpr3287 ws3270"
		just_win32=1
		shift
		;;
	-*)
		usage
		;;
	*)	break
		;;
	esac
done

# Set up the product list.
if [ $# -gt 0 ]
then	prods=$*
else	prods=$all_prods
    	[ -z "$just_win32" ] && all=1
fi

# c3270, x3270, s3270 and tcl3270 need lib3270 and lib3270stubs.
# wc3270 and ws3270 need libw3270 and libw3270stubs.
for i in $prods
do	case $i in
    	wc3270|ws3270)
		need_wlibs=1
		;;
	c3270|s3270|tcl3270|x3270)
		need_libs=1
		;;
	esac
done
[ "$need_libs" ] && prods="$prods lib/3270 lib/3270stubs"
[ "$need_wlibs" ] && prods="$prods lib/w3270 lib/w3270stubs"

# Check for a full Windows release.
if [[ "$build" && \
      "$prods" =~ wc3270 && \
      "$prods" =~ ws3270 && \
      "$prods" =~ wpr3287 ]]
then	winrel=1;
fi

# Make sure the product directories exist.
for i in $prods
do	if [ ! -d "$i" ]
	then	echo >&2 "No $i directory -- must be run from top-level dir."
		exit 1
	fi
done

# Put ReleaseTools in our path, so we can see zipit.
export PATH=$PATH:$PWD/ReleaseTools

# Trace whatever we do.
#set -x

# Pull in the version.
source Common/version.txt

d1=$PWD
reldir=$d1/../../Release

suite=suite3270-$version-src.tgz
setup=wc3270-$version-setup.exe
zip=wc3270-$version-noinstall.zip
ver=${version%%[a-z]*}

# Check for existing targets before we do any real work.
if [ "$release" ]
then	for prod in $prods
	do	if [ -f $reldir/$prod-$version-src.tgz ]
		then	echo >&2 "$prod-$version-src.tgz already exists"
			exit 1
		fi
	done
	if [ "$all" -a -f $reldir/$suite ]
	then	echo >&2 "$suite already exists"
		exit 1
	fi
	if [ "$winrel" -a -f $reldir/$setup ]
	then	echo >&2 "$setup already exists"
	    	exit 1
	fi
	if [ "$winrel" -a -f $reldir/$zip ]
	then	echo >&2 "$zip already exists"
	    	exit 1
	fi
fi

# Build the tarball.
echo "===== Building the tarball."
make -f Makefile.aux -j4 src.tgz

# Work in a clean temporary directory
tmpdir=/tmp/mka
rm -rf $tmpdir
mkdir $tmpdir
cd $tmpdir
tar -xzf $d1/$suite
builddir=$tmpdir/suite3270-$ver

# Make sure we build libraries first.
unset pl px
for prod in $prods
do	if [[ "$prod" =~ lib/ ]]
    	then	pl="$pl $prod"
	else	px="$px $prod"
	fi
done
prods="$pl $px"

for prod in $prods
do
    	cd $builddir

    	# Some products don't get built on Linux.
	case "$prod" in
	wc3270|wpr3287|ws3270)
		islinux=""
		;;
	*)
		islinux=1
		;;
	esac

	# Build it.
	d2=$d1/$prod
	if [ "$build" ]
	then	echo "===== Building $prod."
		cd $prod || exit 1
		if [ -f configure ]
		then	./configure
		elif [ ! -f Makefile ]
		then	continue
		fi
		case $prod in
		tcl3270)
			xflags="-Wno-long-long"
			;;
		x3270)
			xflags="-Wno-deprecated-declarations"
			;;
		*)
			xflags=""
			;;
		esac
		if [ "$islinux" ]
		then	make -j4 CDEBUGFLAGS="-g $xflags -Werror"
		else	make -j4
		fi
		if [ -f $d2/instlist.base ]
		then	echo "===== Installing $prod (base)."
			mkdir i
			make install DESTDIR=$PWD/i
			find i -print | tail -n +2 | sed 's/^..//' | sort >cmp.files
			diff $d2/instlist.base cmp.files || exit 1
			rm -rf i
		fi
		if [ -f $d2/instlist.man ]
		then	echo "===== Installing $prod (man)."
			mkdir i
			make install.man DESTDIR=$PWD/i
			find i -print | tail -n +2 | sed 's/^..//' | sort >cmp.files
			diff $d2/instlist.man cmp.files || exit 1
			rm -rf i
		fi
		if [ -f $d2/instlist.byprefix ]
		then	echo "===== Installing $prod (byprefix)."
			mkdir i
			./configure --without-xmkmf
			make install install.man DESTDIR=$PWD/i
			find i -print | tail -n +2 | sed 's/^..//' | sort >cmp.files
			diff $d2/instlist.byprefix cmp.files || exit 1
			rm -rf i
		fi
		if [ -f $d2/instlist.all-xinstall ]
		then	echo "===== Installing $prod (all-xinstall)."
			mkdir i
			./configure --with-all-xinstall
			make install install.man DESTDIR=$PWD/i
			find i -print | tail -n +2 | sed 's/^..//' | sort >cmp.files
			diff $d2/instlist.all-xinstall cmp.files || exit 1
			rm -rf i
		fi
	fi
done

# Release wc3270 via Inno Setup under Wine.
if [ "$winrel" ]
then	echo "===== Building setup.exe."
	cd $builddir/wc3270
    	wine c:\\Program\ Files\\Inno\ Setup\ 5\\ISCC.EXE wc3270.iss
	echo "===== Building wc3270.zip."
	zipit -c "wc3270 $version" -o $zip wc3270.zipit
fi

# Release each product.
if [ "$release" ]
then	echo "===== Releasing."

	# Release the tarball.
	if [ "$all" ]
	then	cp -p $d1/$suite $reldir/
		chmod ugo-w $reldir/$suite
	fi

	# Release the setup.exe and zip file.
	if [ "$winrel" ]
	then	cp -p $builddir/wc3270/$setup $builddir/wc3270/$zip $reldir/
		chmod ugo-w $reldir/$setup $reldir/$zip
	fi
fi
